
#include "cache.h"
#define IP_TRACKER_COUNT 64 

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t prev_ip;
    uint64_t prev_addr;
    int prev_stride;
    // int state; // 0: initial, 1: transient, 2: steady;
    

    IP_TRACKER() {
        prev_ip = 0;
        prev_addr = 0;
        prev_stride = 0;
        // state = 0;

    }

    void update(uint64_t ip, uint64_t addr) {
        /*
        Since we are using a hash map
        we need to verify if the same instruction
        has come to this tracker or not
        */
        if(prev_ip == 0 || ip != prev_ip) {
            prev_ip = ip;
            prev_addr = addr;
            prev_stride = 0;
            // state = 0;
        } else {
            int stride = (addr >> LOG2_PAGE_SIZE) - (prev_addr >> LOG2_PAGE_SIZE);
            // if(stride == prev_stride) {
            //     // if(state < 2) state++;
            // } else {
                // state = 1;
            prev_stride = stride;
            // }
            prev_addr = addr;
        }

        // return (state == 2);
    }

    int get_stride() {
        return prev_stride;
    }
};

class MASP{
public:
    IP_TRACKER trackers[IP_TRACKER_COUNT];
    uint64_t last_added_address1;
    uint64_t last_added_address2;

    MASP(){
        last_added_address1 = 0;
        last_added_address2 = 0;
    }

    void MASP_operate(uint64_t addr, uint64_t ip){
        int hash_idx = ip % IP_TRACKER_COUNT; // Hashing the IP

        last_added_address1 = 0;
        last_added_address2 = 0;
        // if(to_prefetch) {
        uint64_t pf_address1 = addr + (trackers[hash_idx].get_stride() << LOG2_PAGE_SIZE);
        uint64_t pf_address2 = addr + (addr >> LOG2_PAGE_SIZE - trackers[hash_idx].prev_addr >> LOG2_PAGE_SIZE) << LOG2_PAGE_SIZE;
        trackers[hash_idx].update(ip, addr);
        last_added_address1 = pf_address1;
        last_added_address2 = pf_address2;
            // uint64_t pf_address2 = addr + (vaddr - trackers[hash_idx]);
            // prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);
        // }
    }

    //void prefetch(uint64_t ip, uint64_t prefetch_id, uint8_t instruction){
        //if(last_added_address1){
         //   prefetch_translation(ip, last_added_address1, (int)2, 0, prefetch_id, instruction);
       // }
        //if(last_added_address2){
           // prefetch_translation(ip, last_added_address2, (int)2, 0, prefetch_id, instruction);
        //}

    //}
};

MASP P2;

void CACHE::stlb_prefetcher_initialize() 
{

}

void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{   
    // if(cache_hit){
    //     return;
    // }
    P2.MASP_operate(addr, ip);
    if(P2.last_added_address1){
        prefetch_translation(ip, P2.last_added_address1, (int)2, 0, prefetch_id, instruction);
    }
    if(P2.last_added_address2){
        prefetch_translation(ip, P2.last_added_address2, (int)2, 0, prefetch_id, instruction);
    }
    return;
}


void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return;
}

void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB arbitrary stride prefetcher final stats" << endl;
	// cout << "Degree: " << PREFETCH_DEGREE << endl;
}