#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
#define PREFETCH_DEGREE 5             // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t prev_ip;
    uint64_t prev_addr;
    int prev_stride;
    int state; // 0: initial, 1: transient, 2: steady;

    IP_TRACKER() {
        prev_ip = 0;
        prev_addr = 0;
        prev_stride = 0;
        state = 0;
    }

    bool update(uint64_t ip, uint64_t addr) {
        /*
        Since we are using a hash map
        we need to verify if the same instruction
        has come to this tracker or not
        */
        if(prev_ip == 0 || ip != prev_ip) {
            prev_ip = ip;
            prev_addr = addr;
            prev_stride = 0;
            state = 0;
        } else {
            int stride = (addr >> LOG2_BLOCK_SIZE) - (prev_addr >> LOG2_BLOCK_SIZE);
            if(stride == prev_stride) {
                if(state < 2) state++;
            } else {
                state = 1;
                prev_stride = stride;
            }
            prev_addr = addr;
        }

        return (state == 2);
    }

    int get_stride() {
        return prev_stride;
    }
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher" << endl;

}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    // ------------------------ Add IP-Stride pf_address logic here ----------------------- // 

    int hash_idx = ip % IP_TRACKER_COUNT; // Hashing the IP

    bool to_prefetch = trackers[hash_idx].update(ip, addr);

    if(to_prefetch) {
        for (int i=0; i<PREFETCH_DEGREE; i++) {
            uint64_t pf_address = (cl_addr + (i+1)*trackers[hash_idx].get_stride()) << LOG2_BLOCK_SIZE;
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                break;
            
            prefetch_line(ip, addr, pf_address, FILL_L1, 0, 0, 0);
        }
    }

    // prefetch_line(ip, addr, pf_address, FILL_L1, 0);

    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
	return;
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //