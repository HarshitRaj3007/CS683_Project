#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_ENTRIES 1024           // IP table entries
#define PREFETCH_DEGREE 5                   // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

// ------------ YOU CAN CHANGE THE IP_TABLE FOR YOU DESIGN ---------------- //
class IP_TABLE {
  public:
    uint64_t ip_tag;
    uint64_t last_addr;
    uint16_t signature;
    uint8_t ctr;
    bool ip_valid;

    IP_TABLE () {
        ip_tag = 0;
        last_addr = 0;
        signature = 0;
        ctr = 0;
        ip_valid = false;
    };
};

class CSPT {
  public:
    uint16_t signature;
    int pred_stride;
    int conf;

    CSPT () {
        signature = 0;
        pred_stride = 0;
        conf = 0;
    };
};

// Only for single core
// int ip_table_index = 0, cspt_index = 0;
IP_TABLE ip_trackers_cplx[NUM_IP_TABLE_ENTRIES];
CSPT cspt_trackers_cplx[NUM_IP_TABLE_ENTRIES];

// ------------------------- Updating the signature ---------------------------- // 
uint16_t update_sig_l1(uint16_t old_sig, int delta) {                           
    return (old_sig << 1) ^ delta;
    // return old_sig;
}

// ------------------- Updating confidence for the CPLX class ------------------ // 
int update_conf(int stride, int pred_stride, int conf) {
    if (stride == pred_stride) {if (conf < 15) return conf+1;}
    else if (conf > 0) return conf-1;
    
    return conf;
}

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D Complex-Stride prefetcher" << endl;
    
}

int ct = 0;

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    // if (warmup_complete[0] == 1) { ct++; if (ct < 1000 || (ct >= 2000 && ct < 3000)) {return;}

	// --------------------- Add Complex-Stride pf_address logic here --------------------- // 

    // Note: This is only for SINGLE CORE, needs to be modified for higher cores

    // Check if the IP is already in the IP table
    // int i=0;
    // for(i=0; i<NUM_IP_TABLE_ENTRIES; i++) {
    //     if(ip_trackers_cplx[i].ip_tag == ip)
    //         break;
    // }
    // if(i == NUM_IP_TABLE_ENTRIES) {
    int i = ip % NUM_IP_TABLE_ENTRIES;
    if(ip_trackers_cplx[i].ip_tag != ip) {
        // IP not found in the table
        // i = ip_table_index;
        // ip_table_index = (ip_table_index + 1) % NUM_IP_TABLE_ENTRIES;

        ip_trackers_cplx[i].ip_tag = ip;
        ip_trackers_cplx[i].last_addr = cl_addr;
        ip_trackers_cplx[i].signature = 0;
        ip_trackers_cplx[i].ctr = 0;
        ip_trackers_cplx[i].ip_valid = false;
    } else {
        // IP found in the table

        // Calculate the stride
        int stride = cl_addr - ip_trackers_cplx[i].last_addr;
        ip_trackers_cplx[i].last_addr = cl_addr;

        // Get the signature
        uint16_t curr_signature = ip_trackers_cplx[i].signature;

        ip_trackers_cplx[i].ip_valid = true;
        if(ip_trackers_cplx[i].ip_valid) {
            // Go to the CSPT table
            // int j=0;
            // for(j=0; j<NUM_IP_TABLE_ENTRIES; j++) {
            //     if(cspt_trackers_cplx[j].signature == curr_signature)
            //         break;
            // }
            int j = curr_signature % NUM_IP_TABLE_ENTRIES;
            // if(j == NUM_IP_TABLE_ENTRIES) {
            //     // Signature not found in the CSPT table
            //     j = cspt_index;
            //     cspt_index = (cspt_index + 1) % NUM_IP_TABLE_ENTRIES;

            //     cspt_trackers_cplx[j].signature = curr_signature;
            //     cspt_trackers_cplx[j].pred_stride = 0;
            //     cspt_trackers_cplx[j].conf = 0;
            // } else {
                // Signature found in the CSPT table
            cspt_trackers_cplx[j].conf = update_conf(stride, cspt_trackers_cplx[j].pred_stride, cspt_trackers_cplx[j].conf);

            if (cspt_trackers_cplx[j].conf == 0)
                cspt_trackers_cplx[j].pred_stride = stride;
            // }
        }

        // Get the updated signature
        uint16_t new_signature = update_sig_l1(curr_signature, stride);
        // Come back to the IP table
        // Update the signature and increment ctr
        if(stride != 0) {
            ip_trackers_cplx[i].signature = new_signature;
            // int threshold = 4;
            // if (ip_trackers_cplx[i].ctr < threshold)
            //     ip_trackers_cplx[i].ctr++;
            // if (ip_trackers_cplx[i].ctr >= threshold) // Not in else because ctr can be updated in the above if
                // ip_trackers_cplx[i].ip_valid = true;
        }



        // Prefetching if there have been threshold no of entries in the IP table for current IP
        if (ip_trackers_cplx[i].ip_valid && stride != 0) {
            int to_prefetch = PREFETCH_DEGREE;
            uint64_t pf_address = addr;
            while(to_prefetch > 0) {
                // Find the CSPT entry
                // int j=0;
                // for(j=0; j<NUM_IP_TABLE_ENTRIES; j++) {
                //     if(cspt_trackers_cplx[j].signature == new_signature)
                //         break;
                // }
                // if (j == NUM_IP_TABLE_ENTRIES) {
                int j = new_signature % NUM_IP_TABLE_ENTRIES;
                // if(cspt_trackers_cplx[j].signature != new_signature) {
                //     // Signature not found in the CSPT table
                //     // Stop prefetching
                //     break;
                // } else {
                    // Signature found in the CSPT table
                if(cspt_trackers_cplx[j].conf >= 2) {
                    // Prefetch
                    pf_address += (cspt_trackers_cplx[j].pred_stride) << LOG2_BLOCK_SIZE;
                    if((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                        break; // Stop prefetching if crossing page boundary
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0, 0, 0);

                    to_prefetch--;
                    new_signature = update_sig_l1(new_signature, cspt_trackers_cplx[j].pred_stride);
                } else {
                    // Stop prefetching
                    break;
                }
                // }
            }
        }
    }
    // }

	// prefetch_line(ip, addr, pf_address, FILL_L1, 0);

	return;

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{

}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D complex stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //