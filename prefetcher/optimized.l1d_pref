#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_L1_ENTRIES 1024  // IP table entries
#define IP_TRACKER_COUNT 64           // Number of IP trackers
#define PREFETCH_DEGREE 5             // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

#define PHASE_LENGTH 3000                // Choose an appropriate phase length

uint64_t num_prefs = 0;               // To keep a track of the number of prefetched lines

// Track the accuracy of the different prefetchers
double accuracy_ip;
double accuracy_cplx;
double accuracy_nl;

#define IP_STRIDE 1                   // IP-Stride Prefetcher
#define CPLX 2                        // Complex-Stride Prefetcher
#define NL 3                          // Next-line Prefetcher

uint16_t prefetcher = IP_STRIDE;      // Start with the IP-Stride Prefetcher
// uint16_t ip_pf_useful = 0, cplx_pf_useful = 0, nl_pf_useful = 0;
// uint16_t ip_pf_lower_level = 0, cplx_pf_lower_level = 0, nl_pf_lower_level = 0;
// uint16_t ip_pf_issued = 0, cplx_pf_issued = 0, nl_pf_issued = 0;
bool test_complete = false;

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t prev_ip;
    uint64_t prev_addr;
    int prev_stride;
    int state; // 0: initial, 1: transient, 2: steady;

    IP_TRACKER() {
        prev_ip = 0;
        prev_addr = 0;
        prev_stride = 0;
        state = 0;
    }

    bool update(uint64_t ip, uint64_t addr) {
        /*
        Since we are using a hash map
        we need to verify if the same instruction
        has come to this tracker or not
        */
        if(prev_ip == 0 || ip != prev_ip) {
            prev_ip = ip;
            prev_addr = addr;
            prev_stride = 0;
            state = 0;
        } else {
            int stride = (addr >> LOG2_BLOCK_SIZE) - (prev_addr >> LOG2_BLOCK_SIZE);
            if(stride == prev_stride) {
                if(state < 2) state++;
            } else {
                state = 1;
                prev_stride = stride;
            }
            prev_addr = addr;
        }

        return (state == 2);
    }

    int get_stride() {
        return prev_stride;
    }
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

class IP_TABLE_CPLX {
  public:
    uint64_t ip_tag;
    uint64_t last_addr;
    uint16_t signature;
    uint8_t ctr;
    bool ip_valid;

    IP_TABLE_CPLX () {
        ip_tag = 0;
        last_addr = 0;
        signature = 0;
        ctr = 0;
        ip_valid = false;
    };
};

class CSPT {
  public:
    uint16_t signature;
    int pred_stride;
    int conf;

    CSPT () {
        signature = 0;
        pred_stride = 0;
        conf = 0;
    };
};


// Only for single core
// int ip_table_index = 0, cspt_index = 0;
IP_TABLE_CPLX ip_trackers_cplx[NUM_IP_TABLE_L1_ENTRIES];
CSPT cspt_trackers_cplx[NUM_IP_TABLE_L1_ENTRIES];

// IP_TABLE_CPLX trackers_cplx[NUM_CPUS][NUM_IP_TABLE_L1_ENTRIES];

// ------------------------- Updating the signature ---------------------------- // 
uint16_t update_sig_l1(uint16_t old_sig, int delta) {                           
    return (old_sig << 1) ^ delta;
    // return old_sig;
}

// ------------------- Updating confidence for the CPLX class ------------------ // 
int update_conf(int stride, int pred_stride, int conf) {
    if (stride == pred_stride) {if (conf < 15) return conf+1;}
    else if (conf > 0) return conf-1;
    
    return conf;
}

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D Optimized prefetcher" << endl;
    
}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    if (warmup_complete[0] == 1) {
        if (prefetcher == IP_STRIDE) {
            // std::cout << prefetcher << endl;
            // IP-Stride Prefetcher
            // ------------------------ Add IP-Stride pf_address logic here ----------------------- // 
            
            int hash_idx = ip % IP_TRACKER_COUNT; // Hashing the IP

            bool to_prefetch = trackers[hash_idx].update(ip, addr);

            if(to_prefetch) {
                for (int i=0; i<PREFETCH_DEGREE; i++) {
                    uint64_t pf_address = (cl_addr + (i+1)*trackers[hash_idx].get_stride()) << LOG2_BLOCK_SIZE;
                    if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                        break;
                    
                    if (test_complete == false) {
                        prefetch_line(ip, addr, pf_address, FILL_L1, 0, 1, 1);
                    } else {
                        prefetch_line(ip, addr, pf_address, FILL_L1, 0, 0, 0);
                    }
                    num_prefs++;
                    if (num_prefs >= PHASE_LENGTH && test_complete == false) {
                        num_prefs = 0;
                        // ip_pf_useful = pf_useful;
                        // ip_pf_lower_level = pf_lower_level;
                        // ip_pf_issued = pf_issued;

                        

                        // accuracy_ip = (double)(ip_pf_useful) / (double)(ip_pf_issued);
                        prefetcher = CPLX;

                        // cout << "ip_pf_useless: " << pf_useless << endl;
                    }
                }
            }
            // prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
        else if (prefetcher == CPLX) {
            // Complex-Stride Prefetcher
            // --------------------- Add Complex-Stride pf_address logic here --------------------- // 

            int i = ip % NUM_IP_TABLE_L1_ENTRIES;
            if(ip_trackers_cplx[i].ip_tag != ip) {
                ip_trackers_cplx[i].ip_tag = ip;
                ip_trackers_cplx[i].last_addr = cl_addr;
                ip_trackers_cplx[i].signature = 0;
                ip_trackers_cplx[i].ctr = 0;
                ip_trackers_cplx[i].ip_valid = false;
            } else {
                int stride = cl_addr - ip_trackers_cplx[i].last_addr;
                ip_trackers_cplx[i].last_addr = cl_addr;
                uint16_t curr_signature = ip_trackers_cplx[i].signature;
                ip_trackers_cplx[i].ip_valid = true;
                if(ip_trackers_cplx[i].ip_valid) {
                   int j = curr_signature % NUM_IP_TABLE_L1_ENTRIES;
                   cspt_trackers_cplx[j].conf = update_conf(stride, cspt_trackers_cplx[j].pred_stride, cspt_trackers_cplx[j].conf);
                   if (cspt_trackers_cplx[j].conf == 0)
                        cspt_trackers_cplx[j].pred_stride = stride;
                }
                uint16_t new_signature = update_sig_l1(curr_signature, stride);
                if(stride != 0) {
                    ip_trackers_cplx[i].signature = new_signature;
                }
                if (ip_trackers_cplx[i].ip_valid && stride != 0) {
                    int to_prefetch = PREFETCH_DEGREE;
                    uint64_t pf_address = addr;
                    while(to_prefetch > 0) {
                        int j = new_signature % NUM_IP_TABLE_L1_ENTRIES;
                        if(cspt_trackers_cplx[j].conf >= 2) {
                            pf_address += (cspt_trackers_cplx[j].pred_stride) << LOG2_BLOCK_SIZE;
                            if((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                                break;
                            
                            if (test_complete == false) {
                                prefetch_line(ip, addr, pf_address, FILL_L1, 0, 1, 2);
                            } else {
                                prefetch_line(ip, addr, pf_address, FILL_L1, 0, 0, 0);
                            }
                            num_prefs++;
                            if (num_prefs >= PHASE_LENGTH && test_complete == false) {
                                num_prefs = 0;
                                // cplx_pf_useful = pf_useful - ip_pf_useful;
                                // cplx_pf_lower_level = pf_lower_level - ip_pf_lower_level;
                                // cplx_pf_issued = pf_issued - ip_pf_issued;

                                // accuracy_cplx = (double)(cplx_pf_useful) / (double)(cplx_pf_issued);
                                prefetcher = NL;
                            }

                            to_prefetch--;
                            new_signature = update_sig_l1(new_signature, cspt_trackers_cplx[j].pred_stride);
                        } else {
                            break;
                        }
                    }
                }
            }
            // prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
        else if (prefetcher == NL) {
            // Next-Line Prefetcher
            // ----------------------- Add Next-line pf_address logic here ------------------------ // 
            
            for (int i=0; i<PREFETCH_DEGREE; i++) {
                uint64_t pf_address = (cl_addr + ((i+1))) << LOG2_BLOCK_SIZE;

                // only issue a prefetch if the prefetch address is in the same 4 KB page
                // as the current demand access address
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;
                    
                if (test_complete == false) {
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0, 1, 3);
                } else {
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0, 0, 0);
                }
                num_prefs++;
                if (num_prefs >= PHASE_LENGTH && test_complete == false) {
                    num_prefs = 0;
                    // nl_pf_useful = pf_useful - cplx_pf_useful - ip_pf_useful;
                    // nl_pf_lower_level = pf_lower_level - cplx_pf_lower_level - ip_pf_lower_level;
                    // nl_pf_issued = pf_issued - cplx_pf_issued - ip_pf_issued;

                    // accuracy_nl = (double)(nl_pf_useful) / (double)(nl_pf_issued);
                    // if (accuracy_ip > accuracy_cplx && accuracy_ip > accuracy_nl)
                    //     prefetcher = IP_STRIDE;
                    // else if (accuracy_cplx > accuracy_ip && accuracy_cplx > accuracy_nl)
                    //     prefetcher = CPLX;
                    // else
                    //     prefetcher = NL;
                    
                    // cout << "ip_pf_useful: " << ip_pf_useful << endl;
                    // cout << "ip_pf_issued: " << ip_pf_issued << endl;
                    // cout << "cplx_pf_useful: " << cplx_pf_useful << endl;
                    // cout << "cplx_pf_issued: " << cplx_pf_issued << endl;
                    // cout << "nl_pf_useful: " << nl_pf_useful << endl;
                    // cout << "nl_pf_issued: " << nl_pf_issued << endl;

                    // cout << "pf_useful: " << pf_useful << endl;
                    // cout << "pf_lower_level: " << pf_lower_level << endl;

                    // cout << "IP_Stride Accuracy: " << accuracy_ip << endl;
                    // cout << "Complex-Stride Accuracy: " << accuracy_cplx << endl;
                    // cout << "Next-Line Accuracy: " << accuracy_nl << endl;

                    // cout << "Prefetcher: " << prefetcher << endl;


                    test_complete = true;
                    prefetcher = 0;
                    // cout << "test_complete: " << test_complete << endl;
                    break;
                }
            }
            // prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
        else if (prefetcher != 0) {
            assert(0);
        }

        if(test_complete) {
            // cout << "entered\n";
            // cout << pf1_useful << " " << pf2_useful << " " << pf3_useful << endl;
            // accuracy_ip = (double)(pf1_useful) / (double)(pf1_issued);
            // accuracy_cplx = (double)(pf2_useful) / (double)(pf2_issued);
            // accuracy_nl = (double)(pf3_useful) / (double)(pf3_issued);

            accuracy_ip = (double)(pf1_useful) / (double)(pf1_lower_level);
            accuracy_cplx = (double)(pf2_useful) / (double)(pf2_lower_level);
            accuracy_nl = (double)(pf3_useful) / (double)(pf3_lower_level);

            if (pf1_useful == 0 || pf1_issued == 0) accuracy_ip = 0;
            if (pf2_useful == 0 || pf2_issued == 0) accuracy_cplx = 0;
            if (pf3_useful == 0 || pf3_issued == 0) accuracy_nl = 0;
            
            if (accuracy_ip > accuracy_cplx && accuracy_ip > accuracy_nl) {
                if (prefetcher != IP_STRIDE) {
                    cout << "IP-Stride Prefetcher is the best" << endl;
                    cout << "IP-Stride Accuracy: " << accuracy_ip*100 << "% = " << pf1_useful << " / " << pf1_lower_level << endl;
                    cout << "Complex-Stride Accuracy: " << accuracy_cplx*100 << "% = " << pf2_useful << " / " << pf2_lower_level << endl;
                    cout << "Next-Line Accuracy: " << accuracy_nl*100 << "% = " << pf3_useful << " / " << pf3_lower_level << endl;
                }
                prefetcher = IP_STRIDE;
            } else if (accuracy_cplx > accuracy_ip && accuracy_cplx > accuracy_nl) {
                if (prefetcher != CPLX) {
                    cout << "Complex-Stride Prefetcher is the best" << endl;
                    cout << "IP-Stride Accuracy: " << accuracy_ip*100 << "% = " << pf1_useful << " / " << pf1_lower_level << endl;
                    cout << "Complex-Stride Accuracy: " << accuracy_cplx*100 << "% = " << pf2_useful << " / " << pf2_lower_level << endl;
                    cout << "Next-Line Accuracy: " << accuracy_nl*100 << "% = " << pf3_useful << " / " << pf3_lower_level << endl;
                }
                prefetcher = CPLX;
            } else {
                if (prefetcher != NL) {
                    cout << "Next-Line Prefetcher is the best" << endl;
                    cout << "IP-Stride Accuracy: " << accuracy_ip*100 << "% = " << pf1_useful << " / " << pf1_lower_level << endl;
                    cout << "Complex-Stride Accuracy: " << accuracy_cplx*100 << "% = " << pf2_useful << " / " << pf2_lower_level << endl;
                    cout << "Next-Line Accuracy: " << accuracy_nl*100 << "% = " << pf3_useful << " / " << pf3_lower_level << endl;
                }
                prefetcher = NL;
            }
        }
            
    }

	return;

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
    
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D optimized prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //