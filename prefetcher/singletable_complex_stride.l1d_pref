#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_ENTRIES 1024           // IP table entries
#define PREFETCH_DEGREE 5                   // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

// ------------ YOU CAN CHANGE THE IP_TABLE FOR YOU DESIGN ---------------- //
class IP_TABLE {
  public:
    uint64_t ip_tag;
    // uint64_t last_page;                     // last page seen by IP
    // uint64_t last_cl_offset;                // last cl offset in the 4KB page
    int64_t last_stride;                    // last delta observed
    bool ip_valid;                      // Valid IP or not   
    int conf;                               // CPLX conf
    uint16_t signature;                     // CPLX signature
    // int stride;                             // Stride
    uint64_t last_addr;                     // Last address seen by IP
    int pred_stride;                        // Predicted stride

    IP_TABLE () {
        ip_tag = 0;
        // last_page = 0;
        // last_cl_offset = 0;
        // last_stride = 0;
        ip_valid = 0;
        signature = 0;
        conf = 0;
        // stride = 0;
        last_addr = 0;
        pred_stride = 0;
    };
};

IP_TABLE trackers_cplx[NUM_CPUS][NUM_IP_TABLE_ENTRIES];

// ------------------------- Updating the signature ---------------------------- // 
uint16_t update_sig_l1(uint16_t old_sig, int delta) {                           
    return (old_sig << 1) ^ delta;
    // return old_sig;
}

// ------------------- Updating confidence for the CPLX class ------------------ // 
int update_conf(int stride, int pred_stride, int conf) {
    if (stride == pred_stride) {if (conf < 3) return conf+1;}
    else if (conf > 0) return conf-1;
    
    return conf;
}

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D Complex-Stride prefetcher" << endl;
    
}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

	// --------------------- Add Complex-Stride pf_address logic here --------------------- // 

    // Note: This is only for SINGLE CORE, needs to be modified for higher cores

    // Finding the ip_tag which is valid
    int i = 0, pf_ctr = PREFETCH_DEGREE;
    for (i=0; i<NUM_IP_TABLE_ENTRIES; i++) {
        if (trackers_cplx[0][i].ip_tag == ip && trackers_cplx[0][i].ip_valid) break;
    }
    if (i == NUM_IP_TABLE_ENTRIES) {
        // IP not found
        for (i=0; i<NUM_IP_TABLE_ENTRIES; i++) {
            if (trackers_cplx[0][i].ip_tag == 0 && !trackers_cplx[0][i].ip_valid) break;
        }
        if (i == NUM_IP_TABLE_ENTRIES) {
            srand(time(0));
            i = rand() % NUM_IP_TABLE_ENTRIES;
        }

        // i chosen, initializing the IP
        trackers_cplx[0][i].ip_tag = ip;
        trackers_cplx[0][i].ip_valid = 1;
        trackers_cplx[0][i].last_addr = cl_addr;
        trackers_cplx[0][i].pred_stride = 0;
        trackers_cplx[0][i].conf = 0;
        trackers_cplx[0][i].signature = 0;
    } else {
        // IP found, updating the IP
        int curr_stride = cl_addr - trackers_cplx[0][i].last_addr;
        trackers_cplx[0][i].conf = update_conf(curr_stride, trackers_cplx[0][i].pred_stride, trackers_cplx[0][i].conf);
        if (trackers_cplx[0][i].conf == 0) trackers_cplx[0][i].pred_stride = curr_stride;

        int new_signature = update_sig_l1(trackers_cplx[0][i].signature, curr_stride);
        trackers_cplx[0][i].last_addr = cl_addr;
        trackers_cplx[0][i].ip_valid = 0;

        // Finding the new signature in the IP table
        while (pf_ctr > 0) {
            int j = 0;
            for (j=0; j<NUM_IP_TABLE_ENTRIES; j++) {
                if (trackers_cplx[0][j].ip_tag == ip && trackers_cplx[0][j].signature == new_signature) break;
            }
            if (j == NUM_IP_TABLE_ENTRIES) {
                // Signature not found
                for (j=0; j<NUM_IP_TABLE_ENTRIES; j++) {
                    if (trackers_cplx[0][j].ip_tag == 0 && !trackers_cplx[0][j].ip_valid) break;
                }
                if (j == NUM_IP_TABLE_ENTRIES) {
                    srand(time(0));
                    j = rand() % NUM_IP_TABLE_ENTRIES;
                }

                // j chosen, initializing the IP
                trackers_cplx[0][j].ip_tag = ip;
                trackers_cplx[0][j].ip_valid = 1;
                trackers_cplx[0][j].last_addr = cl_addr;
                trackers_cplx[0][j].pred_stride = 0;
                trackers_cplx[0][j].conf = 0;
                trackers_cplx[0][j].signature = new_signature;

                // Stop prefetch looping
                break;
            } else {
                // Signature found, updating the IP
                trackers_cplx[0][j].ip_valid = 1;
                trackers_cplx[0][j].last_addr = cl_addr;
                
                if(trackers_cplx[0][j].conf == 3) {
                    // Prefetching
                    uint64_t pf_address = (cl_addr + trackers_cplx[0][j].pred_stride) << LOG2_BLOCK_SIZE;
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0);
                    pf_ctr--;
                } else {
                    // Stop prefetching
                    break;
                }
            }
        }
    }


	// prefetch_line(ip, addr, pf_address, FILL_L1, 0);

	return;

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{

}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D complex stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //